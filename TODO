============
 TODO: nabu
============

:publisher:

- finder:

  - detect duplicate Id and spit out error if this is happens.
  
  - support :Id: anywhere, including in a comment
  - remove Id bibliographic field from contents before sending/processing
    - add option to leave it there
  
  - restrict finder to certain extensions (default is all files)
    - test with .txt extensions

  - the regular expression used for the Id should be configurable
  - the number of characters read to find the Id should be configurable too
  

- find a good strategy to deal with errors gracefully
  - do we even bother entering partial data when there are errors?
    make it an option on the server.


- implement local verification with docutils w/out writer, without nabu
  transforms, just parsing


- removing files:
  - add a remove function, to remove content from files that are gone
    - this offers a way to cleanup by considering only the files that are present 
      (could be fast, like another clean method, but just for the files that
      aren't found in this pass)

- support encrypted files from the publisher
  - problem: how do we identify documents to be published without decrypting?


- setup automated publish on commit using
  - CVS
  - Subversion
  ---> and document!

- test with other encodings than utf-8 in source files




:source files:
- uniformize the :Id: tags


:server setup and beta users:
- add parameters to the nabu-contents.cgi script:
  - user (required)
  - type (optional, if not present print list)
  - rendering is for debugging: generic field/value style

- add users to the storage and contents fetching script
  - setup CGI on my server
  - write a script to add databases for new users
  - send script to friends to try it out

- finish implementing server, and allow client-side parsing to enter content
  directly

- add upload date to all material stored in the database
- add upload user to all material stored in the database
  - this way, multiple users can fill in the same "nabu" storage to 
    produce shared content

- automatically adding columns for entry "fields" that are not currently
  in the database, makes the data model looser





:entries:
- warn on files that have no titles (add minimum requirements entryform)

- find a way for the entryforms to be "loosely coupled" with the data model on
  the server.

- add a generic field list parser for creating new types of records without
  code: the entry type is the first field list, if it matches some pattern
  (e.g. if it's empty);

- comment nodes could be stripped off complete

- there should be and .. end directive to stop the processing from that point on.
  - .. disclosure:: private directive could achieve something similar



:documentation:
- create home page to describe what it is;

- naming: 

  * Tinba: Tinba Is Not a Blog A...
  * xNB: x is not a blog
  * NABO: Not A Blog Only


