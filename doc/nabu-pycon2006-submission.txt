===========================================================
    PyCon 2006 Presentation Submission: "What is Nabu?"
===========================================================

:Author: Martin Blais <blais@furius.ca>
:Date: 2005-10-22
:Abstract:

   Submission overview for a presentation about the Nabu text-file publishing
   system at Pycon 2006.


Author and Contact Information
==============================

:Name: Martin Blais

:Short Bio: Background in computer graphics and I've been programming Python for
       around 5 years.  I offer a Python training course since July.

:Contact: I can be reached via email at <blais@furius.ca>.  I do not use the
          phone anymore, please use email.

:Website: http://furius.ca

:Project Home: More information about the project that I wish to present in this
               talk can be found at http://furius.ca/nabu .

:Categories: - Documentation
             - Web Programming
             - Open Source Python Project


Requested Timeslot
==================

I would prefer a 45 min talk, with around 10 mins for questions, as this would
allow me time to present a simple example, which I feel would be necessary to
really understand what this project is about and its potential, as well as some
important subtleties of the ReST_ input format.  

Otherwise, this talk *could* be made either 30 min.


Summary of proposed presentation
================================

Nabu is a simple framework for data extraction from documents which exploits the
power of expression of simple text files as a medium to fill a database with
entries of various information types.  It leverages the docutils_ document tree
structure to provides a way to extract various kinds of data from a set of
documents and fill a database with them.

Some of the most important ideas surrounding Nabu follow:

* Data is stored **across** files:  There are many types of data that would be
  best stored *across* a collection of documents, such as contact info,
  bookmarks, book references, etc.  Instead, common patterns of usage dictate
  dedicated files and formats to store this kind of information (e.g. an address
  *book*, a bookmarks list), which is due to the absence of an integrated
  system.  With Nabu I propose a solution for this, by actually avoid
  integration and leveraging on the simplicity of text files;

* **Loose data format**: by embedding specialized information within a casual
  generic document structure and relying on specialized parsers for each type of
  extracted data, Nabu provides a kind of "loose" data entry model that could be
  well-suited for many applications;

* **Local editing**:  editing files requires powerful tools.  A problem with
  Wikis is that there is a trade-off between ubiquity and the editing power:
  browser clients offer a very limited form of editing with their simple
  widgets.  This can be quite a pain to use when writing long documents.  Nabu
  offers the possibility to publish content in a generic form that is edited
  locally, but served remotely.


FIXME continue here

It is difficult to quickly explain what Nabu is all about and why it is
interesting, because it lies at the boundaries of multiple known applications:
Wikis, file formats, Blogs, mind-mapping applications.  However, for people with
the ability to edit text files easily, Nabu can become a powerful platform for
organizing certain kinds of data.  This is why I want to do a talk on this
project.


Presentation Outline
====================

FIXME continue this

- My Love Affair with Text files
  - Text files are forever
  - Address book
  - Bookmarks
  - Books / References
  - Travel Notes

- ReStructuredText

- Publishing Files
  - The nabu publisher client
  - Mapping files to documents


- Subtlety: Visualizing docutils structure

- How to build a Blog system in 10 min.




Intended Audience
=================

All people who use and love **simple text files** as a way to maintain
information.  ReST, Wiki and Blog addicts are the prime interested parties for
this talk, but programmers in general--in particular web developers--will find
something interesting in this project.


.. _docutils:: http://docutils.sourceforge.net
.. _ReStructuredText:: http://docutils.sourceforge.net/rest.html FIXME check
.. _ReST:: http://docutils.sourceforge.net/rest.html FIXME check





Submission Guidelines
=====================

FIXME: remove this section.

Submission Format
-----------------

Proposals should be 250 to 1000 words long (i.e., one to four
pages in manuscript format), containing the following information:

        * Author name(s)
        * Contact Information
        * Requested timeslot (30 minutes, 45 minutes, or either)
        * Summary of proposed presentation
        * Presentation outline
        * Intended audience (non-programmers, beginning
          programmers, advanced users, CPython developers, etc.)

ASCII format is preferred (plain or reST), with HTML as a
secondary alternative. If you have any queries about submission,
or if you would like to discuss the possibility of submitting in a
different format or style, please send mail to the conference
organizers at pycon at python dot org.

Session lengths include time for audience questions. You should
budget at least five minutes for questions; for example, a
30-minute talk will be 25 minutes of presentation and 5 minutes of
questions.

The preferred length for talks is 30 minutes. You can request a
45-minute slot, but proposals requiring 45 minutes will be
reviewed more stringently and tutorial talks will be preferred for
these longer slots.

       * Core Python
       * Other implementations: Jython, IronPython, PyPy, and Stackless
       * Python libraries and extensions
       * Databases
       * Documentation
       * GUI Programming
       * Game Programming
       * Network Programming
       * Open Source Python projects
       * Packaging Issues
       * Programming Tools
       * Project Best Practices
       * Embedding and Extending
       * Science and Math
       * Web-based Systems
