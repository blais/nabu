=============================================
   Ideas for Information Publishing System
=============================================

:Author: Martin Blais <blais@furius.ca>
:Date: 2005-06-20
:Abstract:

   Some ideas for my information publishing system.

.. contents::

High-Level Design
=================

Components
----------

There are three main phases:

1. recursively searching for all the files that have an appropriate marker for
   publication in them (e.g. :Id:); compute md5sum of these files and query the
   server for md5sums of the files which were last updated for it.

2. parse the files with docutils and transform then; stop before the writer
   phase; 

3. pickle the document trees and store them in a database, and store all the
   other extracted elements as well;

4. build code that can query the data;




Other stuff
===========




Web Publishing
--------------

Unique Identifiers
~~~~~~~~~~~~~~~~~~

- how do we create permanent links?

  - files may change locations
  - titles may change

  Unique identifiers fix the problem.  You can even use them to link between the
  files (e.g. build a transform for the reader that looks at the references and
  than transforms certain target URL patterns).  Those unique identifiers can be
  any type of string and is unique, not just UUIDs.



Links to other systems
----------------------

| LiveJournal -- personal publishing platform written in PHP
| http://www.livejournal.com/site/about.bml
| php, blog, pim







--------------------------------------------------------------------------------





The idea is to unite my techdoc, zwiii-src/contents and priv notes projects to
become the unique source of my personal and public documents.  A web application
that would replace zwiii would become the way to publish various types of
documents.  Only documents marked as public would appear on the blog.
Organization of the documents would be by category, but each document would
nevertheless have a date, location, and potentially link to some of my
photographs.




Bookmarks could be search by examining the keywords, the content of the
enclosing document.  No need to mark keywords at all!




Other
-----

Rename
~~~~~~

Rename it to either:

- Furious Wanderlust
- Politburo Wanderlust or Wanderlust for the Politburo


Projects/Documents Reorganization
---------------------------------

- priv/notes/opportunities.asc
  - put all opportunities together
- techdoc/future.txt
- techdoc/projects
- priv/notes
- priv/travel.d -> zwiii
- priv/notes-books -> zwiii
- priv/bookmarks -> (nil)
- priv/addrbook -> (nil)
- todo.asc
- zwiii-rsc/contents
- languages -> zwiii

- put old and new emacs tricks in priv, and publicly published on blog
- add new emacs trick: X selection thing

Note: some project ideas should be public, some should not.
- levels of disclosure, associated with access privileges

- reorganize my priv directory completely in line with this




Ideas
-----

Q: would a Wiki be a better way to organize the information?
   -> related to linking and organization

Q: how will I bind the pages in the application?


- rewrite zwiii to have a web interface, but still save content in files
- integrate media items, each media item with text, link, etc.:

  - book reviews (on the web)

    - the book list should be automatically extracted from the book reviews
      files, sorted with dates, rather than having to live in a single file

  - movies, with associated review and link
  - photo entries
  - private and shared entries
  - recently looked-up words and their associated definitions
  - entirely public blog
  - each entry should have a public and private portion, for taking personal
    notes

- media items could be typed?
- no tree hierarchy: i would prefer categories, then a tree can map onto it
- blog entries, need to be able link to photographs
  - how do we insert photo groups?
- accounts? yes and on, privileges and permissions per file would be great
- simplified authentication, e.g. enter email, confirm email, that's it
- shared calendar of upcoming events?
- add rss feed
- techdoc should become integrated in zwiii, minus the projects
- backend should be text files that I can edit in emacs and update

- allow parts of the same source document to be public, parts to be private, in
  the same media item/document;

- allow the creation of temporary tokens to send links to people, links that
  will work on specific sections and that will only work temporarily, with
  limited permissions

  - restrict by images
  - restrict by series
  - restrict by date

- look at hooking directly into a subversion repository,
  see greg stein's wiki

- add a special mode for slide shows that renders without borders or nothing,
  perhaps just a CSS or just a totally separate mode.

- support rss

- I need to be able to put links within the text files that will be
  automatically added to my bookmarks file

  - do the same with addrbook entries

  - make this generic: special entries can be "pulled" from files and viewed and
    searched globally, e.g. ::

       .. entry:: bookmark
       .. entry:: addrbook
       .. entry:: ...

    This processing could be performed when filling up the database with the
    texts.


Misc
----

- automatically detect words that could be found on Wikipedia and create links
  automatically.


- entries extracted from the text should really be generic. ::

  .. entry:: bib

      BibTeX entry, extracted for use with BibTeX, converted to HTML automatically


- bookmarks entries should be served as RSS just like delicious!!!

- design a protocol between the information server to be able to easily write
  clients



The TODO list
-------------

Currently, my TODO list lies in 3 places:
  - in a text file
  - in my email (Starred)
  - bugs on SF

Problems:
- time is being spent replicating or moving entries around
- it is not available from work

It would be truly awesome to find a way to integrate all of this in a bug
tracking system of some kind, with:

- priorities
- quick to modify
- available from anywhere
- with categories


What kinds of media elements to I want to share?
------------------------------------------------

  - book reviews
  - movie reviews
  - blog entries (links to photographs)
  - photographs (public and private)
  - calendar, shared with rachel
  - project ideas, some public, some private
  - technical documents (encrypt, shipcds, thinkpad)

Basically, priv should contains mostly just technical stuff, config.

All other documents should be in a blog space, in which zwiii would
automatically become just a subset.  Should this space contain my bookmarks and
addressbook?

I think I got it: join all of priv and zwiii-src together. All documents that
should be public should have a special tag in them, otherwise they will not be
served at all.  Remove the templates and email list from zwiii-src, that shall
become part of the application server that will serve those documents.



Design Ideas
------------

- nice fonts:

  * readable: http://www.jorendorff.com/articles/unicode/intro.html

- support next/previous html navigation in the head

- random images on top header, like flickr

- provide a nice, lean, printable view

:thumbnails:

- add funky rotated Thumbscrew for rendering, this is really cool
- better images could have larger thumbnails






Example Source File
-------------------


::

    ==================
     Bar-B-Q Shopping
    ==================

    :Id: ec87d535-9236-48e4-9630-741831abdb9c   <-- unique file id
    :Disclosure: public
    :Expire: 2005-09-04

    Some text.

    Some Section
    ------------

    Some more text.
    http://furius.ca/barbecue-grills       <-- a bookmark

    .. disclosure:: private        <-- change the default disclosure level

    Some personal notes that aren't published anywhere.




Summary of Talking with Dave Goodger about how to go about this
---------------------------------------------------------------

Ideas:

- implement boxquote parser to replace .. note

- emacs: try table.el

- over-and-under titles are considered DIFFERENT than single underline titles,
  just as if they were using a new character, e.g. they can open a new level.

- try subtitles

- S5 reader: count words or lines in each slide/section and output a warning if
  too long

- try csv-tables


Nabu
----

- I could define new directives

- or I could use classes.  Class directives apply to the "next thing". Then I
  could use a transform to extract those bits of things.  They also work
  recursively.

- Another option: I could write my own reader (simple, small) to find field
  lists, and interpret certain field list values to make the entries into
  specific types, e.g.

     :Address:
     :Name: Martin Blais
     :Email: blais@furius.ca

     ...

     or even

     :Address: | ksjdjds
     	       | sjds djsjdsdjs
	       | sjdhsdsjhdjshdshs

     (it's recursive, remember!)

     :Link:
     :desc:	Classifieds in Montreal
     :url: 	http://kijiji.montreal.com
     :keywords: montreal, classifieds

  This actually would probably be the best approach.


