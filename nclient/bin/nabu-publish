#!/usr/bin/env python
#
# $Source$
# $Id$
#

"""
Nabu restructuredText Reader Extractor.

Usage:
   nabu-publish [<options>] <dir-or-file> [<dir-or-file> ...]

This program read some input text files, identifies and extracts meaningful
information chunks from them, such as addresses and contact info, bookmarks and
links, quotes, and much more.  The goal is for the automatic extraction and
classification of this information in order to publish it in a database, on top
of which various specialized views can be made available.

We want this extraction and publication system to work incrementally, to speed
up the process.  Also, the organization of the source files should be
independent of the organization of the data in the database.

For more details, see the design document that comes with Nabu.
"""

# stdlib imports
import pickle
import xmlrpclib

try: # set the locale to the user settings.
    import locale
    locale.setlocale(locale.LC_ALL, '')
except:
    pass

# nabu imports
from nabu.finder import find_to_publish
from nabu import history, process

server_def = 'http://furius.local.biz/nabu-server.cgi'

def main():
    """
    Main program of publisher client.
    """
    import optparse
    parser = optparse.OptionParser(__doc__.strip())

    parser.add_option('-v', '--verbose', action='store_true',
                      help="Increase verbosity")

    parser.add_option('-N', '--no-recurse', '--dont-recurse',
                      action='store_false', dest='recursive', default=True,
                      help="Disable recursion for directories.")

    parser.add_option('-s', '--server-url', action='store', default=server_def,
                      help="URL to server handler.")

## FIXME add user/password options, maybe query for password?

    opts, args = parser.parse_args()


    # create server connection
    server = xmlrpclib.ServerProxy(opts.server_url, allow_none=1)

    history_getter = history.NetworkHistoryGetter(server)
    processor = process.ClientProcessor(None) 
    
    proclist = find_to_publish(history_getter, args, opts.recursive, opts.verbose)
    for pfile in proclist:
        processor.process(pfile.fn, pfile.unid, pfile.digest, pfile.contents)


if __name__ == '__main__':
    main()
